#!/usr/bin/env ruby
require 'newrepo'
require 'highline'
require 'colorize'
require 'optparse'

def ui
  @ui ||= HighLine.new
end

def get_password(prompt_text, default = '')
  prompt = prompt_text
  prompt += default.length > 0 ? ' [' + default + ']' : ''
  param = ui.ask(prompt) { |q| q.echo = false }
  return param.length > 0 ? param : default
end

def get_value(prompt_text, default = '')
  prompt = prompt_text
  prompt += default.length > 0 ? ' [' + default + ']' : ''
  param = ui.ask(prompt)
  return param.length > 0 ? param : default
end

options = {}

nr = OptionParser.new do |opt|
  opt.banner = "Usage: nr COMMAND [OPTIONS]"
  opt.separator  ""
  opt.separator  "Command"
  opt.separator  "     public: Public Repo"
  opt.separator  "             or"
  opt.separator  "     private: Private Repo"
  opt.separator  ""
  opt.separator  "Options"

  opt.on("-s [SERV]", String, "Service Name") do |serv|
    options[:service] = serv
  end

  opt.on("-d [DESC]", String, "Repo description") do |desc|
    options[:description] = desc
  end

  opt.on("-l [LANG]", String, "Repo language, i.e. Ruby, PHP, Javascript") do |lang|
    options[:language] = lang
  end

  opt.on("-h","--help","help") do
    options[:stop] = true
    info = Newrepo::Info.new
    puts info.describe
    puts opt
  end
end.parse!(ARGV)

if options[:stop] == nil
  # Prompt for Repo name, username, and password
  # Prompt popular choices for repo language
  if options[:service] == nil
    ui.choose do |menu|
      menu.index_suffix = ". "

      menu.header = "
Services"
      menu.prompt = "Choose the service for your repository " +
"Your choice: "

      menu.choices(
        :BitBucket, :GitHub
      ) do |choice|
        options[:service] = choice
        ui.say("
Goin with #{choice} eh...

".green)
      end
    end
  end
  repo_name = get_value('Repo Name: ', '')
  username = get_value('Username: ', '')
  password = get_password('Password: ', '')

  # Prompt popular choices for repo language
  if options[:language] == nil && options[:service].to_s == "BitBucket"
    ui.choose do |menu|
      menu.index_suffix = ". "

      menu.header = "
Languages"
      menu.prompt = "Choose the programming language for your repo. If " +
      "it's not listed above, run the command with -l LANGUAGE.
Your choice: "

      menu.choices(
        :C, :'C#', :'C++', :CoffeeScript, :'HTML/CSS',
        :Java, :Javascript, :'Objective-C', :Perl,
        :Php, :Python, :Ruby, :Shell, :SQL
      ) do |choice|
        options[:language] = choice
        ui.say("
#{choice} is a nice choice!

".green)
      end
    end
  end

  if options[:description] == nil
    options[:description] = get_value('Description: ', '')
  end

  case ARGV[0]
  when "public"
    permission = false
    ui.say("creating a public repo".green)
  when "private"
    permission = true
    ui.say("creating a private repo".green)
  else
    ui.say("You must specify the type of repo... public or private".red)
  end

  if permission != nil
    case options[:service].to_s
    when "BitBucket"
      cmd = "curl --user #{username}:#{password} https://api.bitbucket.org/1.0/repositories" +
      " --data \"is_private=#{permission}\" --data \"name=#{repo_name}\"" +
      " --data \"description=#{options[:description]}\" --data \"language=#{options[:language].downcase}\""
      shown = "curl https://api.bitbucket.org/1.0/repositories" +
      " --data \"is_private=#{permission}\" --data \"name=#{repo_name}\"" +
      " --data \"description=#{options[:description]}\" --data \"language=#{options[:language].downcase}\""
    when "GitHub"
      cmd = "curl -u #{username}:#{password} https://api.github.com/user/repos" +
      " -d '{\"name\":\"#{repo_name}\", \"private\":#{permission}," +
      " \"description\":\"#{options[:description]}\"}'"
      shown = "curl https://api.github.com/user/repos" +
      " -d '{\"private\":#{permission}, \"name\":\"#{repo_name}\"," +
      " \"description\":\"#{options[:description]}\"}'"
    else
      ui.say("You must choose a service".red)
    end

    puts shown
    system cmd
  end
end
