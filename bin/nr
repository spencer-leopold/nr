#!/usr/bin/env ruby
require 'newrepo'
require 'highline'
require 'colorize'
require 'optparse'

def ui
  @ui ||= HighLine.new
end

def get_username(prompt_text, default = '')
  prompt = prompt_text
  prompt += default.length > 0 ? ' [' + default + ']' : ''
  param = ui.ask(prompt)
  return param.length > 0 ? param : default
end

def get_password(prompt_text, default = '')
  prompt = prompt_text
  prompt += default.length > 0 ? ' [' + default + ']' : ''
  param = ui.ask(prompt) { |q| q.echo = false }
  return param.length > 0 ? param : default
end

options = {}

nr = OptionParser.new do |opt|
  info = Newrepo::Info.new
  opt.banner = info.describe
  opt.separator  ""
  opt.separator  "Usage: nr COMMAND1 COMMAND2 [OPTIONS]"
  opt.separator  ""
  opt.separator  "Command 1"
  opt.separator  "     public: Public Repo"
  opt.separator  "             or"
  opt.separator  "     private: Private Repo"
  opt.separator  ""
  opt.separator  ""
  opt.separator  "Command 2"
  opt.separator  "     Name of Repo"
  opt.separator  ""
  opt.separator  "Options"

  opt.on("-d [DESC]", String, "Repo description") do |desc|
    options[:description] = desc
  end

  opt.on("-l [LANG]", String, "Repo language, i.e. Ruby, PHP, Javascript") do |lang|
    options[:language] = lang
  end

  opt.on("-h","--help","help") do
    options[:stop] = true
    puts opt
  end
end.parse!(ARGV)

if options[:stop] == nil
  # Prompt for username and password
  username = get_username('Username: ', '')
  password = get_password('Password: ', '')

  # Prompt popular choices for repo language
  if options[:language] == nil
    ui.choose do |menu|
      menu.index_suffix = ". "

      menu.header = "
Languages"
      menu.prompt = "Choose the programming language for your repo. If " +
      "it's not listed above, run the command with -l LANGUAGE.
Your choice: "

      menu.choices(
        :c, :'c#', :'c++', :'html/css',
        :java, :javascript, :'objective-c', :perl,
        :php, :python, :ruby, :shell, :sql
      ) do |choice|
        options[:language] = choice
        ui.say("
#{choice} is a nice choice!

")
      end
    end
  end

  case ARGV[0]
  when "public"
    permission = false
    ui.say("creating a public repo")
  when "private"
    permission = true
    ui.say("creating a private repo")
  else
    ui.say("Although, you must specify the type of repo... public or private")
  end

  if permission != nil
    cmd = "curl --user #{username}:#{password} https://api.bitbucket.org/1.0/repositories" +
    " --data \"is_private=#{permission}\" --data \"name=#{ARGV[1]}\"" +
    " --data \"description=#{options[:description]}\" --data \"language=#{options[:language]}\""
    shown = "curl https://api.bitbucket.org/1.0/repositories" +
    " --data \"is_private=#{permission}\" --data \"name=#{ARGV[1]}\"" +
    " --data \"description=#{options[:description]}\" --data \"language=#{options[:language]}\""
    puts shown
    system cmd
  end
end
